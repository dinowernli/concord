syntax = "proto3";

package raft_proto;

message Server {
  string host = 1;
  int32 port = 2;
}

// Identifies an entry in a given log.
message EntryId {
  int64 term = 1;
  int64 index = 2;
}

// Represents an entry in a server's log.
message Entry {
  EntryId id = 1;
  bytes payload = 2;
}

// Sent by candidate to request votes from its peers. If a quorum of votes is
// received, the candidate promotes itself to leader of the cluster.
message VoteRequest {
  // Term of the rpc originator.
  int64 term = 1;

  // Candidate for whom we are requesting the vote. Always the
  // originator of the rpc.
  Server candidate = 2;

  // Information about the last log entry on the candidate.
  EntryId last = 3;
}

message VoteResponse {
  // Term of the rpc recipient.
  int64 term = 1;
  
  // Whether the recipient of the request has decided to grant
  // their vote to the requester.
  bool granted = 2;
}

// Sent by the leader of the cluster to its peers in order to replicate entries
// in the shared log.
message AppendRequest {
  // Term of the rpc originator.
  int64 term = 1;

  // Current leader. Always the originator of the rpc.
  Server leader = 2;

  // Information about the entry immediately preceding the entries
  // to append.
  EntryId previous = 3;

  // The entries to append to the recipient's log.
  repeated Entry entries = 4;

  // Index of the last committed entry on the leader.
  int64 committed = 5;
}

message AppendResponse {
  // Term of the rpc recipient.
  int64 term = 1;

  // Indicates whether or not the entries were appended successfully.
  bool success = 2;
}

// Status of a requested operation.
enum Status {
  // Indicates that the operation succeeded.
  SUCCESS = 0;

  // Indicates that the operation couldn't be processed because the recipient
  // was not the leader of the cluster.
  NOT_LEADER = 1;
}

// Request to add a new entry to the shared raft log. Only the leader can
// process these request. Followers will return a NOT_LEADER error.
message CommitRequest {
  // The payload to append to the log.
  bytes payload = 1;
}

message CommitResponse {
  // Status of the requested commit operation.
  Status status = 1;

  // The last known leader of the raft cluster. Not populated if the cluster
  // has never had a leader.
  Server leader = 2;

  // The id of the committed entry. Only populated if status is SUCCESS.
  EntryId entry_id = 3;
}

// A request for the leader to step down and turn into a follower. The main
// use case for this method is when we're preparing to remove the current
// leader of a cluster from the cluster entirely.
message StepDownRequest {
}

message StepDownResponse {
  // Status of the requested step down operation.
  Status status = 1;

  // The last known leader of the raft cluster. Not populated if the cluster
  // has never had a leader. Note that if status is SUCCESS, this holds the
  // address of the leader which just stepped down as part of this request.
  Server leader = 2;
}

service Raft {
  rpc Vote (VoteRequest) returns (VoteResponse) {}
  rpc Append (AppendRequest) returns (AppendResponse) {}
  rpc Commit (CommitRequest) returns (CommitResponse) {}
  rpc StepDown (StepDownRequest) returns (StepDownResponse) {}
}

