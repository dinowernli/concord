syntax = "proto3";

// Specifies the schema of all data and operations required to implement a Raft
// StateMachine for a versioned key-value store. The data and operations need
// to be serialized and transmitted to other participants in the Raft cluster.
package keyvalue_proto;

// A single key-value entry.
message Entry {
  // The key for this entry.
  bytes key = 1;

  // The value for this entry.
  bytes value = 2;
}

// Represents an operation which modifies the key-value space. This is the type
// used as an entry in the Raft commit log.
message Operation {
  oneof op {
    SetOperation set = 1;
  }
}

// Sets a (key, value) pair in the store, overwriting the value for the key
// if already present.
message SetOperation {
  Entry entry = 1;
}

// Represents a full snapshot of all data present in the store.
message Snapshot {
  int64 version = 1;
  repeated Entry entries = 2;
}

// A request to retrieve an entry by key.
message GetRequest {
  // They key we want to retrieve.
  bytes key = 1;

  // The version at which we want to retrieve the key. If the version is less
  // than or equal to zero, the latest version is returned.
  int64 version = 2;
}

// A response containing the requested entry.
message GetResponse {
  // The requested entry. Absent if no entry exists.
  Entry entry = 1;

  // The version of the store used to respond to the request.
  int64 version = 2;
}

// A request to set the value for a supplied key.
message PutRequest {
  // They key for which we are setting the value.
  bytes key = 1;

  // The value to write.
  bytes value = 2;
}

// A response returned for a put request.
message PutResponse {
}

// An rpc service providing access to a key-value store.
service KeyValue {
  rpc Get (GetRequest) returns (GetResponse) {}
  rpc Put (PutRequest) returns (PutResponse) {}
}
