// This file is @generated by prost-build.
/// Sent by candidate to request votes from its peers. If a quorum of votes is
/// received, the candidate promotes itself to leader of the cluster.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoteRequest {
    /// Term of the rpc originator.
    #[prost(int64, tag = "1")]
    pub term: i64,
    /// Candidate for whom we are requesting the vote. Always the
    /// originator of the rpc.
    #[prost(message, optional, tag = "2")]
    pub candidate: ::core::option::Option<super::raft_common_proto::Server>,
    /// Information about the last log entry on the candidate.
    #[prost(message, optional, tag = "3")]
    pub last: ::core::option::Option<super::raft_common_proto::EntryId>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VoteResponse {
    /// Term of the rpc recipient.
    #[prost(int64, tag = "1")]
    pub term: i64,
    /// Whether the recipient of the request has decided to grant
    /// their vote to the requester.
    #[prost(bool, tag = "2")]
    pub granted: bool,
}
/// Sent by the leader of the cluster to its peers in order to replicate entries
/// in the shared log.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendRequest {
    /// Term of the rpc originator.
    #[prost(int64, tag = "1")]
    pub term: i64,
    /// Current leader. Always the originator of the rpc.
    #[prost(message, optional, tag = "2")]
    pub leader: ::core::option::Option<super::raft_common_proto::Server>,
    /// Information about the entry immediately preceding the entries
    /// to append.
    #[prost(message, optional, tag = "3")]
    pub previous: ::core::option::Option<super::raft_common_proto::EntryId>,
    /// The entries to append to the recipient's log.
    #[prost(message, repeated, tag = "4")]
    pub entries: ::prost::alloc::vec::Vec<super::raft_common_proto::Entry>,
    /// Index of the last committed entry on the leader.
    #[prost(int64, tag = "5")]
    pub committed: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppendResponse {
    /// Term of the rpc recipient.
    #[prost(int64, tag = "1")]
    pub term: i64,
    /// Indicates whether or not the entries were appended successfully.
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// The current "next" index in the recipient's log.
    #[prost(int64, tag = "3")]
    pub next: i64,
}
/// Request to add a new entry to the shared raft log. Only the leader can
/// process these requests. Followers will return a NOT_LEADER error.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitRequest {
    /// The payload to append to the log.
    #[prost(bytes = "vec", tag = "1")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitResponse {
    /// Status of the requested commit operation.
    #[prost(enumeration = "Status", tag = "1")]
    pub status: i32,
    /// The last known leader of the raft cluster. Not populated if the cluster
    /// has never had a leader.
    #[prost(message, optional, tag = "2")]
    pub leader: ::core::option::Option<super::raft_common_proto::Server>,
    /// The id of the committed entry. Only populated if status is SUCCESS.
    #[prost(message, optional, tag = "3")]
    pub entry_id: ::core::option::Option<super::raft_common_proto::EntryId>,
}
/// A request for the leader to step down and turn into a follower. The main
/// use case for this method is when we're preparing to remove the current
/// leader of a cluster from the cluster entirely.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepDownRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepDownResponse {
    /// Status of the requested step down operation.
    #[prost(enumeration = "Status", tag = "1")]
    pub status: i32,
    /// The last known leader of the raft cluster. Not populated if the cluster
    /// has never had a leader. Note that if status is SUCCESS, this holds the
    /// address of the leader which just stepped down as part of this request.
    #[prost(message, optional, tag = "2")]
    pub leader: ::core::option::Option<super::raft_common_proto::Server>,
}
/// Sent by the leader of the cluster to its peers in order to transmit a
/// snapshot of the underlying state machine to the follower.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallSnapshotRequest {
    /// Term of the rpc originator.
    #[prost(int64, tag = "1")]
    pub term: i64,
    /// Current leader. Always the originator of the rpc.
    #[prost(message, optional, tag = "2")]
    pub leader: ::core::option::Option<super::raft_common_proto::Server>,
    /// The id of the latest entry included in the snapshot. The snapshot replaces
    /// all entries up to (and including) this one on the receiver.
    #[prost(message, optional, tag = "3")]
    pub last: ::core::option::Option<super::raft_common_proto::EntryId>,
    /// The snapshot bytes, as obtained from the state machine.
    /// TODO(dino): send chunks instead of entire snapshots.
    #[prost(bytes = "vec", tag = "4")]
    pub snapshot: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstallSnapshotResponse {
    /// Term of the rpc recipient.
    #[prost(int64, tag = "1")]
    pub term: i64,
}
/// A request to change the cluster's configuration. The actual transition
/// happens as a two-step process where the first step is to commit an
/// intermediate "joint consensus" configuration. This request returns once
/// that intermediate configuration has been committed (which guarantees that
/// the new config requested in this change will be applied eventually).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeConfigRequest {
    /// The new desired (voting) members of the cluster.
    #[prost(message, repeated, tag = "1")]
    pub members: ::prost::alloc::vec::Vec<super::raft_common_proto::Server>,
}
/// A response for configuration changes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeConfigResponse {
    /// Indicates whether the configuration has been changed successfully.
    #[prost(enumeration = "Status", tag = "1")]
    pub status: i32,
    /// The last known leader of the raft cluster. Not populated if the cluster
    /// has never had a leader.
    #[prost(message, optional, tag = "2")]
    pub leader: ::core::option::Option<super::raft_common_proto::Server>,
}
/// Status of a requested operation.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    /// Indicates that the operation succeeded.
    Success = 0,
    /// Indicates that the operation couldn't be processed because the recipient
    /// was not the leader of the cluster.
    NotLeader = 1,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Success => "SUCCESS",
            Self::NotLeader => "NOT_LEADER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUCCESS" => Some(Self::Success),
            "NOT_LEADER" => Some(Self::NotLeader),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod raft_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct RaftClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RaftClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RaftClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RaftClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RaftClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn vote(
            &mut self,
            request: impl tonic::IntoRequest<super::VoteRequest>,
        ) -> std::result::Result<tonic::Response<super::VoteResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/raft_service_proto.Raft/Vote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("raft_service_proto.Raft", "Vote"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn append(
            &mut self,
            request: impl tonic::IntoRequest<super::AppendRequest>,
        ) -> std::result::Result<tonic::Response<super::AppendResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/raft_service_proto.Raft/Append",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("raft_service_proto.Raft", "Append"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn commit(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitRequest>,
        ) -> std::result::Result<tonic::Response<super::CommitResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/raft_service_proto.Raft/Commit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("raft_service_proto.Raft", "Commit"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn step_down(
            &mut self,
            request: impl tonic::IntoRequest<super::StepDownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StepDownResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/raft_service_proto.Raft/StepDown",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("raft_service_proto.Raft", "StepDown"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn install_snapshot(
            &mut self,
            request: impl tonic::IntoRequest<super::InstallSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InstallSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/raft_service_proto.Raft/InstallSnapshot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("raft_service_proto.Raft", "InstallSnapshot"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_config(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangeConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/raft_service_proto.Raft/ChangeConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("raft_service_proto.Raft", "ChangeConfig"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod raft_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RaftServer.
    #[async_trait]
    pub trait Raft: std::marker::Send + std::marker::Sync + 'static {
        async fn vote(
            &self,
            request: tonic::Request<super::VoteRequest>,
        ) -> std::result::Result<tonic::Response<super::VoteResponse>, tonic::Status>;
        async fn append(
            &self,
            request: tonic::Request<super::AppendRequest>,
        ) -> std::result::Result<tonic::Response<super::AppendResponse>, tonic::Status>;
        async fn commit(
            &self,
            request: tonic::Request<super::CommitRequest>,
        ) -> std::result::Result<tonic::Response<super::CommitResponse>, tonic::Status>;
        async fn step_down(
            &self,
            request: tonic::Request<super::StepDownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StepDownResponse>,
            tonic::Status,
        >;
        async fn install_snapshot(
            &self,
            request: tonic::Request<super::InstallSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InstallSnapshotResponse>,
            tonic::Status,
        >;
        async fn change_config(
            &self,
            request: tonic::Request<super::ChangeConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangeConfigResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct RaftServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RaftServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RaftServer<T>
    where
        T: Raft,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/raft_service_proto.Raft/Vote" => {
                    #[allow(non_camel_case_types)]
                    struct VoteSvc<T: Raft>(pub Arc<T>);
                    impl<T: Raft> tonic::server::UnaryService<super::VoteRequest>
                    for VoteSvc<T> {
                        type Response = super::VoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Raft>::vote(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/raft_service_proto.Raft/Append" => {
                    #[allow(non_camel_case_types)]
                    struct AppendSvc<T: Raft>(pub Arc<T>);
                    impl<T: Raft> tonic::server::UnaryService<super::AppendRequest>
                    for AppendSvc<T> {
                        type Response = super::AppendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AppendRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Raft>::append(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AppendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/raft_service_proto.Raft/Commit" => {
                    #[allow(non_camel_case_types)]
                    struct CommitSvc<T: Raft>(pub Arc<T>);
                    impl<T: Raft> tonic::server::UnaryService<super::CommitRequest>
                    for CommitSvc<T> {
                        type Response = super::CommitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Raft>::commit(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommitSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/raft_service_proto.Raft/StepDown" => {
                    #[allow(non_camel_case_types)]
                    struct StepDownSvc<T: Raft>(pub Arc<T>);
                    impl<T: Raft> tonic::server::UnaryService<super::StepDownRequest>
                    for StepDownSvc<T> {
                        type Response = super::StepDownResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StepDownRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Raft>::step_down(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StepDownSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/raft_service_proto.Raft/InstallSnapshot" => {
                    #[allow(non_camel_case_types)]
                    struct InstallSnapshotSvc<T: Raft>(pub Arc<T>);
                    impl<
                        T: Raft,
                    > tonic::server::UnaryService<super::InstallSnapshotRequest>
                    for InstallSnapshotSvc<T> {
                        type Response = super::InstallSnapshotResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InstallSnapshotRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Raft>::install_snapshot(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InstallSnapshotSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/raft_service_proto.Raft/ChangeConfig" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeConfigSvc<T: Raft>(pub Arc<T>);
                    impl<T: Raft> tonic::server::UnaryService<super::ChangeConfigRequest>
                    for ChangeConfigSvc<T> {
                        type Response = super::ChangeConfigResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeConfigRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Raft>::change_config(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeConfigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RaftServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "raft_service_proto.Raft";
    impl<T> tonic::server::NamedService for RaftServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
