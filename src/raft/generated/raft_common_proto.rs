// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Server {
    /// The hostname which can be used to contact the server.
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    /// The port the server is listening on.
    #[prost(int32, tag = "2")]
    pub port: i32,
    /// A name used for debugging, printing logs, etc.
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
}
/// Configuration for the cluster.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterConfig {
    /// Determines which members are considered part of the cluster.
    #[prost(message, repeated, tag = "1")]
    pub voters: ::prost::alloc::vec::Vec<Server>,
    /// Holds the next set of members for the cluster.
    #[prost(message, repeated, tag = "2")]
    pub voters_next: ::prost::alloc::vec::Vec<Server>,
}
/// Identifies an entry in a given log.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntryId {
    #[prost(int64, tag = "1")]
    pub term: i64,
    #[prost(int64, tag = "2")]
    pub index: i64,
}
/// Represents an entry in a server's log.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entry {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<EntryId>,
    #[prost(oneof = "entry::Data", tags = "2, 3")]
    pub data: ::core::option::Option<entry::Data>,
}
/// Nested message and enum types in `Entry`.
pub mod entry {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        /// An opaque payload which can be applied to the state machine.
        #[prost(bytes, tag = "2")]
        Payload(::prost::alloc::vec::Vec<u8>),
        /// An updated configuration for the cluster. Used to effect membership
        /// changes and similar reconfigurations.
        #[prost(message, tag = "3")]
        Config(super::ClusterConfig),
    }
}
